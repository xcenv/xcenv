#!/usr/bin/env bash
# Summary: Show the current Xcode version
# Usage: xcenv version-name <version>

return_xcenv_version()
{
  echo "${1/Contents\/Developer/}"
  exit
}

set -e
[ -n "$XCENV_DEBUG" ] && set -x

if [ -z "$XCENV_VERSION" ]; then
  if [ -n "$1" ]; then
    XCENV_VERSION=$1
  else
    XCENV_VERSION_FILE="$(xcenv-version-file)"
    XCENV_VERSION="$(xcenv-version-file-read "$XCENV_VERSION_FILE" || true)"
  fi
fi

if [ -z "$XCENV_VERSION" ] || [ "$XCENV_VERSION" = "system" ]; then
  return_xcenv_version "$(xcode-select -p)"
fi

find_xcode_app_from_version()
{
  XCODE_VERSION=$1

  XCODE_LOCATIONS=$(xcenv-xcodes)
  XCODE_VERSIONS=()

  IFS=$'\n'

  for APP in $XCODE_LOCATIONS; do
  	VERSION=$(xcenv-xcode-version "$APP")
  	XCODE_VERSIONS+=("${VERSION}-${APP}")
  done
  
  XCODE_VERSIONS=($(sort -r <<<"${XCODE_VERSIONS[*]}"))
  
  for VERSION in ${XCODE_VERSIONS[*]}; do
    APP_VERSION=${VERSION/-*/}
    APP=${VERSION/$APP_VERSION-/}
	  if [[ "$APP_VERSION" =~ ^$XCODE_VERSION$ ]]; then
	  	XCODE_APP="$APP"
	  	break;
	  fi
  done
  
  unset IFS
	
  echo "$XCODE_APP"
}

if [ -d "$XCENV_VERSION" ]; then
  return_xcenv_version "$XCENV_VERSION"
fi

XCODE_APP="$(find_xcode_app_from_version "$XCENV_VERSION")"
if [ -n "$XCODE_APP" ]; then
  return_xcenv_version "${XCODE_APP}"
else
  # If the specified version is formatted as X.X.0, strip the final .0 and re-check whether
  # an installed Xcode version exists
  if [[ "$XCENV_VERSION" =~ ^([1-9][0-9]*\.)([0-9]*)(\.0)$ ]]; then
    STRIPPED_XCENV_VERSION=${XCENV_VERSION:0:$((${#XCENV_VERSION} - 2))}
    XCODE_APP="$(find_xcode_app_from_version "$STRIPPED_XCENV_VERSION")"

    if [ -n "$XCODE_APP" ]; then
      return_xcenv_version "${XCODE_APP}"
      exit 0
    fi
  fi

  if [ -n "$1" ]; then
    echo "xcenv: version \`$XCENV_VERSION' is not installed" >&2
    exit 1
  else
    echo "xcenv: version \`$XCENV_VERSION' is not installed (set by $(xcenv-version-origin))" >&2
    exit 1
  fi
fi
